---
# Minimal Tekton Pipeline that delegates to a single Task which
# submits a request to Testing Farm, then waits and fails/passes accordingly.

apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: testing-farm-pipeline
spec:
  description: >
    Use the Konflux-provided SNAPSHOT to find the component image, then ask
    Testing Farm to run that image (CMD/ENTRYPOINT) in a privileged container.
  params:
    # Provided automatically by Konflux Integration service (JSON string).
    - name: SNAPSHOT
      type: string
      description: Konflux Snapshot JSON (provided automatically)
    # Your component name inside the snapshot (to pick the right image)
    - name: COMPONENT_NAME
      type: string
      description: Name of the component inside the snapshot
    # Testing Farm params
    - name: TF_COMPOSE
      type: string
      default: RHEL-9
      description: Testing Farm compose (e.g. Fedora-41, RHEL-9.4)
    - name: TF_ARCH
      type: string
      default: x86_64
      description: Target architecture
    - name: TF_GIT_URL
      type: string
      description: Git repo URL containing tmt tests/plans
    - name: TF_GIT_REF
      type: string
      default: main
      description: Branch/commit/SHA for tmt tests
    - name: TF_PLAN
      type: string
      default: /plans/run-root-image
      description: FMF path to the tmt plan (e.g. /plans/run-root-script)
    - name: TF_TIMEOUT_MIN
      type: string
      default: "120"
      description: End-to-end TF timeout in minutes
    - name: TF_TMT_ENV
      type: string
      default: ""
      description: Space-separated K=V list passed to tmt as environment

  tasks:
    # ---- Task 1: extract image pullspec from SNAPSHOT ---------------------------
    - name: extract-image-from-snapshot
      taskSpec:
        params:
          - name: SNAPSHOT
            type: string
          - name: COMPONENT_NAME
            type: string
        results:
          - name: image-url
            description: Container image pullspec for the selected component
        steps:
          - name: find-component-image
            image: quay.io/konflux-ci/konflux-test:stable
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: COMPONENT_NAME
                value: $(params.COMPONENT_NAME)
            script: |
              #!/bin/sh
              set -eu

              COMPONENT_IMAGE=$(
                jq -r --arg comp "${COMPONENT_NAME}" '
                  (.spec.components // .components)[]
                  | select(.name == $comp)
                  | .containerImage
                ' <<< "${SNAPSHOT}"
              )

              if [ -z "${COMPONENT_IMAGE}" ] || [ "${COMPONENT_IMAGE}" = "null" ]; then
                echo "ERROR: component '${COMPONENT_NAME}' not found in Snapshot"
                echo "Snapshot components:"
                echo "${SNAPSHOT}" | jq '.spec.components // .components'
                exit 2
              fi

              echo "Found image: ${COMPONENT_IMAGE}"
              echo -n "${COMPONENT_IMAGE}" > "$(results.image-url.path)"

    # ---- Task 2: run Testing Farm sending ------
    - name: run-testing-farm
      runAfter: [extract-image-from-snapshot]
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/yomismo/repo.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tekton/tasks/testing-farm-request.yaml
      params:
        - name: TF_COMPOSE
          value: $(params.TF_COMPOSE)
        - name: TF_ARCH
          value: $(params.TF_ARCH)
        - name: TF_GIT_URL
          value: $(params.TF_GIT_URL)
        - name: TF_GIT_REF
          value: $(params.TF_GIT_REF)
        - name: TF_PLAN
          value: $(params.TF_PLAN)
        - name: TF_TIMEOUT_MIN
          value: $(params.TF_TIMEOUT_MIN)
        - name: IMAGE_REF
          value: $(tasks.extract-image-from-snapshot.results.image-url)
        - name: TF_TMT_ENV
          value: $(params.TF_TMT_ENV)
